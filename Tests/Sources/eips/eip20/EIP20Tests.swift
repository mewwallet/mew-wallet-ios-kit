//
//  EIP20Tests.swift
//  MEWwalletKitTests
//
//  Created by Mikhail Nikanorov on 8/4/20.
//  Copyright Â© 2020 MyEtherWallet Inc. All rights reserved.
//

// swiftlint:disable line_length

import Foundation
import Quick
import Nimble
import BigInt

@testable import mew_wallet_ios_kit

class EIP20Tests: QuickSpec {
  let testVectors: [String] = [
    // basic
    "0x",
    // correct approve
    "0x095ea7b3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000012d687",
    // incorrect approve
    "0x095ea7b3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
    // correct transfer
    "0xa9059cbb000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000009fbf1",
    // incorrect transfer
    "0xa9059cbb000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
    // complex
    "0xef3f3d0b000000000000000000000000aa4910771af9ca656cc530dac83e1234ecf986ca000000000000000000000000a3bed4e1c75d001a644e7e6122d47263b5e6acd2000000000000000000000000dd00ab21fcea391e85409a283ccd7dff0b52bd7d000000000000000000000000000000000000000000000038a4d9f1afd3f46b95000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000005fd3a712524672c99a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000005149107a1a29c6654af820dfc83ed2645cf986ca000000000000000000000000514910771afaca626af540cff8ae8224ecf986ca0000000000000000000000007a250d163044cf23973cdf265d3cb4a659f2488d0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000ba30aa55223fc4e8c4f1b951ac2edf14eac9a64c000000000000000000000000ba30a255aa3fc4e86cf1125eabced11ee3c9a64c0000000000000000000000007a250d5610bccf5297ccdf2c5dacb4c659f2488d00000000000000000000000000000000000000000000000000000000000001ac015e27c30000000000000000000000007a250d5630b4cc53273adf1c5d2cb4c659f2488d0000000000000000000000000000000000000000000000000000000000000000095eacb30000000000000000000000007a250d5630b4cf539c392f2a5d1cb4b65df2488dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff38ed1d39000000000000000000000000000000000000000000000038a4d9ffa1dcfc1b95000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ba30a2a5a2cfc61864211954accedf1eeac9a64c000000000000000000000000000000000000000000000000000000005c26fb6a000000000000000000000000000000000000000000000000000000000000000300000000000000000000000051c910771af9ca656af8401ffb3e126cecf986ca000000000000000000000000c02aaa39bc231e8dba0e1c4fa7ead9083c756cc2000000000000000000000000a3bedaa1c75d00fa6f4e5e692bbb7261b5e9acd20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000008800000000000000000000000000000000000000000000000000000000000001ac0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"
  ]
  
  let correctAnswers: [TransactionType] = [
    .basic,
    .approve(Address(raw: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"), "000000000000000000000000000000000000000000000000000000000012d687"),
    .unknown("0x095ea7b3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeee"),
    .transfer(Address(raw: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"), "000000000000000000000000000000000000000000000000000000000009fbf1"),
    .unknown("0xa9059cbb000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeee"),
    .unknown("0xef3f3d0b000000000000000000000000aa4910771af9ca656cc530dac83e1234ecf986ca000000000000000000000000a3bed4e1c75d001a644e7e6122d47263b5e6acd2000000000000000000000000dd00ab21fcea391e85409a283ccd7dff0b52bd7d000000000000000000000000000000000000000000000038a4d9f1afd3f46b95000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000260000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004e000000000000000000000000000000000000000000000005fd3a712524672c99a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000030000000000000000000000005149107a1a29c6654af820dfc83ed2645cf986ca000000000000000000000000514910771afaca626af540cff8ae8224ecf986ca0000000000000000000000007a250d163044cf23973cdf265d3cb4a659f2488d0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000ba30aa55223fc4e8c4f1b951ac2edf14eac9a64c000000000000000000000000ba30a255aa3fc4e86cf1125eabced11ee3c9a64c0000000000000000000000007a250d5610bccf5297ccdf2c5dacb4c659f2488d00000000000000000000000000000000000000000000000000000000000001ac015e27c30000000000000000000000007a250d5630b4cc53273adf1c5d2cb4c659f2488d0000000000000000000000000000000000000000000000000000000000000000095eacb30000000000000000000000007a250d5630b4cf539c392f2a5d1cb4b65df2488dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff38ed1d39000000000000000000000000000000000000000000000038a4d9ffa1dcfc1b95000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ba30a2a5a2cfc61864211954accedf1eeac9a64c000000000000000000000000000000000000000000000000000000005c26fb6a000000000000000000000000000000000000000000000000000000000000000300000000000000000000000051c910771af9ca656af8401ffb3e126cecf986ca000000000000000000000000c02aaa39bc231e8dba0e1c4fa7ead9083c756cc2000000000000000000000000a3bedaa1c75d00fa6f4e5e692bbb7261b5e9acd20000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000008800000000000000000000000000000000000000000000000000000000000001ac0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
  ]
  
  let amounts: [Decimal?] = [
    nil,
    Decimal(1234567),
    nil,
    Decimal(654321),
    nil,
    nil
  ]
  
  override func spec() {
    describe("EIP20 Tests") {
      it("Should correctly format data") {
        for vector in self.testVectors.enumerated() {
          let data = Data(hex: vector.element.lowercased())
          let string = vector.element
          
          let dataType = TransactionType(data: data)
          let stringType = TransactionType(data: string)
          
          let answer = self.correctAnswers[vector.offset]
          let amount = self.amounts[vector.offset]
          
          expect(dataType).to(equal(stringType))
          expect(answer).to(equal(dataType))
          expect(answer).to(equal(stringType))
          
          switch dataType {
          case let .approve(_, stringAmount):
            guard let bigInt = BigInt(stringAmount, radix: 16) else {
              fail("Incorrect data")
              return
            }
            let parsedAmount = Decimal(string: bigInt.decimalString)
            expect(parsedAmount).to(equal(amount))
          case let .transfer(_, stringAmount):
            guard let bigInt = BigInt(stringAmount, radix: 16) else {
              fail("Incorrect data")
              return
            }
            let parsedAmount = Decimal(string: bigInt.decimalString)
            expect(parsedAmount).to(equal(amount))
          default:
            break
          }
        }
      }
      it("Should generate data correctly") {
        let approve = TransactionType.approve(Address(raw: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"), "0x12d687")
        let transfer = TransactionType.transfer(Address(raw: "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"), "0x9fbf1")
        
        guard let approveData = approve.data, let transferData = transfer.data else {
          fail("Both data should be generated")
          return
        }
        
        let restoredApprove = TransactionType(data: approveData)
        let restoredTransfer = TransactionType(data: transferData)
        
        let rawApproveData = Data(hex: "0x095ea7b3000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000012d687")
        let rawTransferData = Data(hex: "0xa9059cbb000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000009fbf1")
        
        expect(approve).to(equal(restoredApprove))
        expect(transfer).to(equal(restoredTransfer))
        
        expect(approveData).to(equal(rawApproveData))
        expect(transferData).to(equal(rawTransferData))
        expect(restoredApprove.data).to(equal(approveData))
        expect(restoredTransfer.data).to(equal(transferData))
      }
    }
  }
}
